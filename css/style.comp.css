*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  font-size: 62.5%; }
  @media only screen and (max-width: 75em) {
    html {
      font-size: 50%; } }

body {
  font-family: "Nunito", san-serif;
  color: #6D5D4B;
  font-weight: 300;
  line-height: 1.6; }

.container {
  display: grid;
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  grid-template-columns: [sidebar-start] 80px [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end];
  /* [col-start] [col-end] this creates a named set of grid lines i.e col-start 1 ..... col-end 8 .
     Here 1140px/8(i.e column count) = 140px i.e 14rem.
    To center the 8-col layout b/w sidebar and viewportend , we add 2 cols.*/ }
  @media only screen and (max-width: 62.5em) {
    .container {
      grid-template-rows: 6rem 80vh min-content 40vw repeat(3, min-content);
      grid-template-columns: [full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end]; } }
  @media only screen and (max-width: 50em) {
    .container {
      grid-template-rows: 6rem calc(100vh - 6rem);
      /* At this media query we want only 2 rows defined specific width  for sidebar and header , 
        and all other rows defined on the content , so we can put min-content on other rows or just leave that for the css grid to 
        automatically implicit grids. */ } }

.heading-1, .heading-2, .heading-3, .heading-4 {
  font-family: "Josefin Sans", san-serif;
  font-weight: 400; }

.heading-1 {
  font-size: 4.5rem;
  color: #f9f7f6;
  line-height: 1; }

.heading-2 {
  font-size: 4rem;
  font-style: italic;
  line-height: 1; }
  .heading-2--light {
    color: #f9f7f6; }
  .heading-2--dark {
    color: #54483A; }

.heading-3 {
  font-size: 1.6rem;
  text-transform: uppercase;
  color: #c69963; }

.heading-4 {
  font-size: 1.9rem; }
  .heading-4--light {
    color: #f9f7f6; }
  .heading-4--dark {
    color: #54483A; }

.btn {
  font-family: "Josefin Sans", san-serif;
  font-size: 1.7rem;
  background-color: #c69963;
  color: #fff;
  border: none;
  border-radius: 0;
  text-transform: uppercase;
  cursor: pointer;
  padding: 1.8rem 3rem;
  transition: all .2s; }
  .btn:hover {
    background-color: #B28451; }

.mb-sm {
  margin-bottom: 2rem; }

.mb-md {
  margin-bottom: 3rem; }

.mb-lg {
  margin-bottom: 4rem; }

.mb-hg {
  margin-bottom: 8rem; }

.sidebar {
  background-color: #c69963;
  grid-column: sidebar-start / sidebar-end;
  grid-row: 1 / -1;
  display: flex;
  justify-content: center; }
  @media only screen and (max-width: 62.5em) {
    .sidebar {
      grid-column: 1/-1;
      grid-row: 1/2;
      justify-content: flex-end;
      align-items: center; } }

.nav-btn {
  border: none;
  border-radius: 0;
  height: 2px;
  width: 4.5rem;
  background-color: #fff;
  margin-top: 4rem; }
  .nav-btn::before, .nav-btn::after {
    content: "";
    height: 2px;
    width: 4.5rem;
    background-color: #fff;
    display: block; }
  .nav-btn::before {
    transform: translateY(-1.5rem); }
  .nav-btn::after {
    transform: translateY(1.3rem); }
  @media only screen and (max-width: 62.5em) {
    .nav-btn {
      margin-top: 0;
      margin-right: 3rem; }
      .nav-btn::before {
        transform: translateY(-1.2rem); }
      .nav-btn::after {
        transform: translateY(1rem); } }

.header {
  background-color: #54483A;
  grid-column: full-start / col-end 6;
  background-image: linear-gradient(rgba(16, 29, 44, 0.9), rgba(16, 29, 44, 0.9)), url(../img/hero.jpeg);
  background-size: cover;
  background-position: center;
  display: grid;
  grid-template-rows: 1fr min-content minmax(6rem, min-content) 1fr;
  grid-template-columns: minmax(min-content, max-content);
  /*This is because otherwise the column occupies extra space . so we say the content to 
    occupy maximunm space it can without any line-break.*/
  justify-content: center;
  grid-row-gap: 1.5rem;
  padding: 8rem;
  padding-top: 4rem; }
  @media only screen and (max-width: 50em) {
    .header {
      grid-column: full-start / full-end; } }
  @media only screen and (max-width: 37.5em) {
    .header {
      padding: 5rem; } }
  .header__logo {
    height: 3rem;
    justify-self: center; }
  .header__btn {
    justify-self: start;
    align-self: start; }
  .header__seenon-text {
    display: grid;
    grid-template-columns: 1fr max-content 1fr;
    grid-column-gap: 1.5rem;
    align-items: center;
    font-size: 1.6rem;
    color: #aaa; }
    .header__seenon-text::before, .header__seenon-text::after {
      content: "";
      height: 1px;
      display: block;
      background-color: currentColor; }
  .header__seenon-logos {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    justify-items: center;
    align-items: center;
    grid-column-gap: 3rem; }
    .header__seenon-logos img {
      max-height: 2.5rem;
      max-width: 100%;
      filter: brightness(70%); }

.realtors {
  background-color: #101d2c;
  grid-column: col-start 7 / full-end;
  padding: 3rem;
  display: grid;
  align-content: center;
  justify-content: center;
  grid-row-gap: 2rem;
  justify-items: center; }
  @media only screen and (max-width: 50em) {
    .realtors {
      grid-column: full-start / full-end;
      grid-row-gap: 3rem; } }
  .realtors__list {
    display: grid;
    grid-template-columns: min-content max-content;
    grid-column-gap: 2rem;
    grid-row-gap: 5vh;
    align-items: center; }
    @media only screen and (max-width: 50em) {
      .realtors__list {
        grid-template-columns: repeat(3, min-content max-content); } }
    @media only screen and (max-width: 37.5em) {
      .realtors__list {
        grid-template-columns: min-content max-content; } }
  .realtors__img {
    width: 7rem;
    border-radius: 50%;
    display: block; }
  .realtors__sold {
    text-transform: uppercase;
    color: #aaa;
    margin-top: -3px; }

.features {
  grid-column: center-start / center-end;
  margin: 15rem 0; }
  @supports (display: grid) {
    .features {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
      /* autofit and minmax() function its a great tool for responsive design in grids*/
      grid-gap: 6rem;
      align-items: start; } }

.feature {
  float: left;
  width: 33.333%;
  margin-bottom: 6rem;
  display: grid;
  grid-template-columns: min-content 1fr;
  grid-row-gap: 1.5rem;
  grid-column-gap: 2.5rem; }
  @supports (display: grid) {
    .feature {
      width: auto;
      margin-bottom: 0; } }
  .feature__icon {
    height: 4.5rem;
    width: 4.5rem;
    fill: #c69963;
    /*grid-row: 1 / -1;  this doesnt work because -1 means the end of explicit grid row/column.
         but here we didnt define rows, so the rows are implicit grids.*/
    grid-row: 1/span 2;
    transform: translateY(-1rem); }
  .feature__text {
    font-size: 1.7rem; }

.story__pictures {
  background-color: #c69963;
  grid-column: full-start/col-end 4;
  background-image: linear-gradient(rgba(198, 153, 99, 0.5), rgba(198, 153, 99, 0.5)), url(../img/back.jpg);
  background-size: cover;
  display: grid;
  grid-template-rows: repeat(6, 1fr);
  grid-template-columns: repeat(6, 1fr);
  align-items: center; }
  @media only screen and (max-width: 50em) {
    .story__pictures {
      grid-column: full-start/full-end;
      padding: 6rem; } }

.story__img--1 {
  width: 100%;
  grid-row: 2/6;
  grid-column: 2/6;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.1); }
  @media only screen and (max-width: 50em) {
    .story__img--1 {
      grid-column: 1/5;
      grid-row: 1 / -1; } }

.story__img-2 {
  width: 115%;
  grid-row: 4/6;
  grid-column: 4/7;
  z-index: 20;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.2); }
  @media only screen and (max-width: 50em) {
    .story__img-2 {
      grid-row: 1 / -1;
      width: 100%; } }

.story__content {
  background-color: #f9f7f6;
  grid-column: col-start 5/ full-end;
  padding: 6rem 8vw;
  /* Since the story__content is a 1-dimensional layout ,we can use flexbox here to center the content. So in modern CSS , we use CSS GRID 
        together with flexbox.*/
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  /* Center the story__content using Css Grid 
        display: grid;
        align-content: center; // align-content prop is used to align all our grid tracks in vertical direction.
        justify-items: start; */ }
  @media only screen and (max-width: 50em) {
    .story__content {
      grid-column: full-start/full-end;
      grid-row: 5 / 6; } }

.story__text {
  font-size: 1.4rem;
  font-style: italic;
  margin-bottom: 4rem; }

.homes {
  grid-column: center-start/center-end;
  margin: 15rem 0;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  grid-gap: 7rem; }

.home {
  background-color: #f9f7f6;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-row-gap: 3.5rem; }
  .home__img {
    width: 100%;
    grid-row: 1/2;
    grid-column: 1/-1;
    z-index: 1; }
  .home__like {
    fill: #c69963;
    height: 2.5rem;
    width: 2.5rem;
    grid-row: 1/2;
    grid-column: 2/3;
    z-index: 2;
    justify-self: end;
    margin: 1rem; }
  .home__name {
    grid-column: 1/-1;
    width: 80%;
    justify-self: center;
    grid-row: 1/2;
    align-self: end;
    z-index: 3;
    transform: translateY(50%);
    /*transform: translateY(-50%);  // We dont prefer this because the row will be half empty.  
        z-index: 5;*/
    font-family: "Josefin Sans", san-serif;
    font-size: 1.6rem;
    font-weight: 400;
    padding: 1.25rem;
    background-color: #101d2c;
    text-align: center;
    color: #fff; }
  .home__location, .home__rooms {
    margin-top: 2.5rem; }
  .home__location, .home__rooms, .home__area, .home__price {
    font-size: 1.5rem;
    margin-left: 2rem;
    display: flex;
    align-items: center; }
    .home__location svg, .home__rooms svg, .home__area svg, .home__price svg {
      height: 2rem;
      width: 2rem;
      fill: #c69963;
      margin-right: 1rem; }
  .home__btn {
    grid-column: 1/-1; }

.gallery {
  background-color: #f9f7f6;
  grid-column: full-start/full-end;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(7, 5vw);
  /*We set the height of each in % of viewport width(i.e 5vw means 5% of vw) , 
    so that the grid doesnt turn weird and maintains its grid structure (i.e each of the grid cell maintains its aspect ratio), 
    when we resize the window. */
  grid-gap: 1.5rem;
  padding: 1.5rem;
  /*Here we use <figure> element ,as a parent to the image, and it becomes the grid item. So we are having an image filling  
    the parent container( here <figure> element) by setting object-fit to cover. */ }
  .gallery__item--1 {
    grid-column: 1/span 2;
    grid-row: 1/span 2; }
  .gallery__item--2 {
    grid-column: 3/span 3;
    grid-row: 1/span 3; }
  .gallery__item--3 {
    grid-column: 6/7;
    grid-row: 1/span 2; }
  .gallery__item--4 {
    grid-column: 7/span 2;
    grid-row: 1/span 2; }
  .gallery__item--5 {
    grid-column: 1/span 2;
    grid-row: 3/span 3; }
  .gallery__item--6 {
    grid-column: 3/span 2;
    grid-row: 4/span 2; }
  .gallery__item--7 {
    grid-column: 5/6;
    grid-row: 4/5; }
  .gallery__item--8 {
    grid-column: 6/span 2;
    grid-row: 3/span 2; }
  .gallery__item--9 {
    grid-column: 8/span 1;
    grid-row: 3/span 3; }
  .gallery__item--10 {
    grid-column: 1/2;
    grid-row: 6/8; }
  .gallery__item--11 {
    grid-column: 2/span 2;
    grid-row: 6/8; }
  .gallery__item--12 {
    grid-column: 4/5;
    grid-row: 6/8; }
  .gallery__item--13 {
    grid-column: 5/span 3;
    grid-row: 5/span 3; }
  .gallery__item--14 {
    grid-column: 8/9;
    grid-row: 6/span 2; }
  .gallery__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    /* So this doesnt affect the aspect-ratio of the image and occupies entire grid-area that we specify.
       similar to setting background-size to cover .*/
    display: block; }

.footer {
  background-color: #101d2c;
  grid-column: full-start/full-end;
  padding: 8rem; }

.nav {
  list-style-type: none;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
  grid-gap: 2rem;
  /*&__item {
        background-color: rgba($color: #fff, $alpha: .05);
        display: grid;
        align-items: center;
    }*/ }
  .nav__link:link, .nav__link:visited {
    text-decoration: none;
    font-family: "Josefin Sans", san-serif;
    font-size: 1.4rem;
    color: #fff;
    padding: 1.5rem;
    text-transform: uppercase;
    text-align: center;
    display: block;
    transition: all .2s;
    font-weight: 300; }
  .nav__link:hover, .nav__link:active {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-3px); }

.copyright {
  font-size: 1.4rem;
  color: #aaa;
  margin-top: 6rem;
  margin-left: auto;
  margin-right: auto;
  width: 70%;
  text-align: center; }

.copy {
  display: inline-block;
  cursor: pointer;
  text-transform: uppercase;
  transition: all .2s;
  backface-visibility: hidden; }
  .copy:hover {
    color: #c69963;
    background-color: rgba(0, 0, 0, 0.9);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.5);
    transform: rotate(4deg) scale(1.2); }
